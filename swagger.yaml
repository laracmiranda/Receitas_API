openapi: 3.0.0
info:
  title: Receitas API
  version: 1.0.0
  description: API para gerenciamento de usuários, receitas, comentários e favoritos, com autenticação JWT e upload de imagens com Cloudinary

servers:
  - url: https://receitas-api-6a7p.onrender.com/api/v1
    description: Servidor remoto no render
  - url: http://localhost:8080/api/v1
    description: Servidor local de desenvolvimento
  - url: http://localhost:3000/api/v1
    description: Servidor para testes

tags:
  - name: Autenticação
    description: Fluxos de login e redefinição de senha
  - name: Usuários
    description: Operações relacionadas a usuários
  - name: Segurança / Conta
    description: Manipulação de dados da conta do usuário autenticado
  - name: Receitas
    description: Operações relacionadas a receitas
  - name: Comentários
    description: Comentários em receitas
  - name: Favoritos
    description: Gerenciamento de favoritos
  - name: Avaliações
    description: Avaliando receitas cadastradas



paths:
  /users:
    get:
      summary: Lista todos os usuários
      description: |
        ### Descrição
        Esta rota retorna **todos os usuários** cadastrados no sistema.

        #### Observações
        - Não requer autenticação
        - Retorna uma lista paginada de usuários
        
      tags: [Usuários]
      responses:
        "200":
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      summary: Cria um novo usuário
      description: |
        ### Descrição
        Esta rota faz o **cadastro** de um novo usuário.

        #### Observações
        - Não requer autenticação
        - Necessário informar nome, email e senha
        - Senha precisa ter no mínimo 8 caracteres
        - Senhas criptografadas com **bcryptjs**
      tags: [Usuários]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{userId}:
    get:
      summary: Busca usuário por ID
      description: |
        ### Descrição
        Esta rota retorna **um único usuário** de acordo com o ID buscado.

        #### Observações
        - Não requer autenticação
        - Necessário informar o ID na URL
      tags: [Usuários]
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
          description: ID do usuário
      responses:
        "200":
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404": { description: Usuário não encontrado }

  /users/me:
    get:
      summary: Retorna os dados do usuário autenticado
      description: |
        ### Descrição
        Esta rota retorna os dados do usuário que está logado no momento.

        #### Observações
        - Necessária autenticação prévia.
      tags: [Segurança / Conta]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: Dados do usuário autenticado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      summary: Atualiza os dados do usuário autenticado
      description: |
        ### Descrição
        Esta rota faz a **atualização** dos dados de um usuário já existente.

        #### Observações
        - Necessária autenticação prévia
        - Os dados atualizados podem ser o nome ou e-mail
        - O ID do usuário já vem do token de autenticação.
      tags: [Usuários]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    delete:
      summary: Deleta a conta do usuário autenticado
      description: |
        ### Descrição
        Esta rota faz o **deleção** de um usuário já existente.

        #### Observações
        - Necessário autenticação prévia.
        - Apenas o próprio usuário pode deletar sua conta.
        - O ID do usuário já vem do token de autenticação.
      tags: [Usuários]
      security: [ { bearerAuth: [] } ]
      responses:
        "204": { description: Usuário deletado com sucesso }

  /users/me/change-password:
    patch:
      summary: Altera a senha do usuário autenticado
      description: |
        ### Descrição
        Esta rota faz o **troca de senha** de um usuário já existente.

        #### Observações
        - Necessário autenticação prévia.
        - O ID do usuário já vem do token de autenticação.
        - É preciso confirmar a senha atual para conseguir definir uma nova.
        - Senha precisa ter no mínimo 8 caracteres.
      tags: [Segurança / Conta]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [currentPassword, newPassword]
              properties:
                currentPassword: { type: string, example: senhaAntiga123 }
                newPassword: { type: string, example: senhaNova456 }
      responses:
        "200":
          description: Senha atualizada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Senha atualizada com sucesso! }
        "401": { description: Senha atual incorreta }

  /users/me/bio:
    patch:
      summary: Edita a biografia do perfil do usuário
      description: |
        ### Descrição
        Esta rota faz a **atualização** da biografia de um usuário já existente.

        #### Observações
        - Necessário autenticação prévia.
        - O ID do usuário já vem do token de autenticação.
      tags: [Usuários]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [bio]
              properties:
                bio: { type: string, example: Cozinho há 10 anos com muito amor }
      responses:
        "200":
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                      
  /auth/login:
    post:
      summary: Login do usuário
      description: |
        ### Descrição
        Esta rota faz a **autenticação** do usuário.

        #### Observações
        - Não requer autenticação prévia, pois é aqui onde o usuário é autenticado.
        - Necessário informar e-mail e senha cadastrados.
        - Gera um token JWT válido por 1h para autenticação do usuário.
      tags: [Autenticação]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, example: usuario@email.com }
                password: { type: string, example: "12345678" }
      responses:
        "200":
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string, example: jwt_token_aqui }
                  user:
                    type: object
                    properties:
                      id: { type: string, example: uuid-do-usuario }
                      name: { type: string, example: Nome do Usuário }
        "401": { description: Credenciais inválidas }

  /auth/request-reset:
    post:
      summary: Solicitação de redefinição de senha
      description: |
        ### Descrição
        Esta rota faz a **solicitação** da redefinição de senha.

        #### Observações
        - Não requer autenticação prévia
        - Necessário informar e-mail previamente cadastrado.
        - Gera um token para redefinição de senha válido por 15 minutos.
        - Envia link de redefinição de senha para o e-mail do usuário.
      tags: [Autenticação]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, example: usuario@email.com }
      responses:
        "200":
          description: E-mail enviado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: E-mail de redefinição enviado! }
        "404": { description: Usuário não encontrado }

  /auth/reset-password/{token}:
    post:
      summary: Redefinir senha
      description: |
        ### Descrição
        Esta rota faz a **redefinição** da senha de um usuário existente.

        #### Observações
        - Não requer autenticação prévia
        - Necessário token enviado por e-mail.
        - Deve ser informada a nova senha para redefinição.
        - Senha precisa ter no mínimo 8 caracteres.
      tags: [Autenticação]
      parameters:
        - in: path
          name: token
          schema: { type: string }
          required: true
          description: Token de redefinição de senha
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newPassword]
              properties:
                newPassword: { type: string, example: novaSenha123 }
      responses:
        "200":
          description: Senha redefinida com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Senha redefinida com sucesso! }
        "400": { description: Token inválido ou expirado }

  /recipes/me:
    get:
      summary: Lista todas as receitas do usuário autenticado
      description: |
        ### Descrição
        Esta rota retorna **todas as receitas** cadastradas por um usuário.

        #### Observações
        - Necessário autenticação prévia.
        - O ID do usuário já vem do token de autenticação.
      tags: [Receitas]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: Lista de receitas
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Recipe" }

  /recipes:
    get:
      summary: Lista todas as receitas
      description: |
        ### Descrição
        Esta rota retorna **todos as receitas** cadastrados no sistema.

        #### Observações
        - Não requer autenticação.
        - Retorna uma lista paginada de receitas.
      tags: [Receitas]
      responses:
        "200":
          description: Lista de receitas
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Recipe" }

    post:
      summary: Cria uma nova receita
      description: |
        ### Descrição
        Esta rota faz o **cadastro** de uma nova receita.

        #### Observações
        - Requer autenticação prévia.
        - Necessário informar nome, categoria, ingredientes, modo de preparo e uma imagem da receita.
      tags: [Receitas]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/RecipeCreate"
      responses:
        "201":
          description: Receita criada com sucesso
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Recipe" }

  /recipes/{recipeId}:
    get:
      summary: Busca receita por ID
      description: |
        ### Descrição
        Esta rota retorna **uma única receita** de acordo com o ID buscado.

        #### Observações
        - Não requer autenticação
        - Necessário informar o ID na URL
      tags: [Receitas]
      parameters:
        - in: path
          name: recipeId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Receita encontrada
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Recipe" }
        "404": { description: Receita não encontrada }

    put:
        summary: Atualiza uma receita
        description: |
          ### Descrição
          Esta rota faz a **atualização** das informações de uma receita já cadastrada.
  
          #### Observações
          - Necessária autenticação prévia.
          - Somente o usuário que cadastrou a receita pode editá-la.
          - O ID do usuário já vem do token de autenticação.
        tags: [Receitas]
        security: [ { bearerAuth: [] } ]
        parameters:
          - in: path
            name: recipeId
            required: true
            schema: { type: string }
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/RecipeUpdate"
        responses:
          "200":
            description: Receita atualizada com sucesso
            content:
              application/json:
                schema: { $ref: "#/components/schemas/Recipe" }
  
    delete:
        summary: Deleta uma receita
        description: |
          ### Descrição
          Esta rota faz a **deleção** de uma receita já cadastrada.
  
          #### Observações
          - Necessária autenticação prévia.
          - Somente o usuário que cadastrou a receita pode deletá-la.
          - O ID do usuário já vem do token de autenticação.
        tags: [Receitas]
        security: [ { bearerAuth: [] } ]
        parameters:
          - in: path
            name: recipeId
            required: true
            schema: { type: string }
        responses:
          "204": { description: Receita deletada com sucesso }
        
  /comments/{recipeId}:
    get:
      summary: Lista comentários de uma receita
      description: |
        ### Descrição
        Esta rota retorna **todos os comentários** feitos em uma receita.

        #### Observações
        - Não requer autenticação.
        - Retorna uma lista paginada de comentários.
        - Necessário informar o ID da receita na URL.
      tags: [Comentários]
      parameters:
        - in: path
          name: recipeId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Lista de comentários
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Comment" }

    post:
      summary: Cria um comentário em uma receita
      description: |
        ### Descrição
        Esta rota **adiciona** um novo comentário em uma receita existente.

        #### Observações
        - Requer autenticação prévia.
        - O comentário precisa ter um conteúdo, não é permitida a criação de comentários vazios.
        - Necessário informar o ID da receita na URL.
      tags: [Comentários]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: recipeId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CommentCreate" }
      responses:
        "201":
          description: Comentário criado com sucesso
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }

  /comments/{commentId}:
    delete:
      summary: Remove um comentário
      description: |
        ### Descrição
        Esta rota **deleta** um comentário já realizado em uma receita existente.

        #### Observações
        - Requer autenticação prévia.
        - Apenas o usuário que comentou pode deletar o comentário.
        - Necessário informar o ID do comentário na URL.
        - O ID do usuário já vem do token de autenticação.
      tags: [Comentários]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: commentId
          required: true
          schema: { type: string }
      responses:
        "204": { description: Comentário removido com sucesso }

  /favorites:
    get:
      summary: Lista todos os favoritos do usuário autenticado
      description: |
        ### Descrição
        Esta rota retorna **todas as receitas** favoritadas por um usuário.

        #### Observações
        - Necessário autenticação prévia.
        - O ID do usuário já vem do token de autenticação.
      tags: [Favoritos]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: Lista de favoritos
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Recipe" }

  /favorites/{recipeId}:
    post:
      summary: Adiciona receita aos favoritos
      description: |
        ### Descrição
        Esta rota **adiciona** uma receita na lista de favoritos de um usuário.

        #### Observações
        - Requer autenticação prévia.
        - Necessário informar o ID da receita na URL.
      tags: [Favoritos]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: recipeId
          required: true
          schema: { type: string }
      responses:
        "201": { description: Receita favoritada com sucesso }

    delete:
      summary: Remove receita dos favoritos
      description: |
        ### Descrição
        Esta rota **remove** uma receita da lista de favoritos de um usuário.

        #### Observações
        - Requer autenticação prévia.
        - Necessário informar o ID da receita na URL.
      tags: [Favoritos]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: recipeId
          required: true
          schema: { type: string }
      responses:
        "204": { description: Receita removida dos favoritos }
  
  /rating/{recipeId}:
    get:
      summary: Lista as avaliações de uma receita
      description: |
        ### Descrição
        Esta rota faz **lista** a quantidade de avaliações de uma receita e a média de avaliações

        #### Observações
        - Não requer autenticação prévia
        - Necessário informar o ID da receita na URL
      tags: [Avaliações]
      parameters:
        - in: path
          name: recipeId
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Senha redefinida com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  avarage: { type: float, example: 4.5 }
                  count: { type: int, example: 30 }
    
    post:
      summary: Avaliar Receita
      description: |
        ### Descrição
        Esta rota faz a **avaliação** de uma receita existente.

        #### Observações
        - Requer autenticação prévia
        - Necessário informar o ID da receita na URL
        - Avaliação deve ser feita com valores de 1 à 5
      tags: [Avaliações]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: recipeId
          schema: { type: string }
          required: true
          description: Id da Receita
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [value]
              properties:
                value: { type: int, example: 5 }
      responses:
        "200":
          description: Senha redefinida com sucesso
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/RateRecipe" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: string, example: uuid-do-usuario }
        name: { type: string, example: João da Silva }
        email: { type: string, example: joao@email.com }

    UserCreate:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string, example: João da Silva }
        email: { type: string, example: joao@email.com }
        password: { type: string, example: "12345678" }

    UserUpdate:
      type: object
      properties:
        name: { type: string, example: João de Oliveira }
        email: { type: string, example: joao@email.com }

    Recipe:
      type: object
      properties:
        id: { type: string, example: uuid-da-receita }
        name: { type: string, example: Bolo de Chocolate }
        category: { type: string, example: Sobremesa }
        description: { type: string, example: Receita de bolo caseira da minha mãe! }
        ingredients:
          type: array
          items: { type: string }
          example: ["Farinha", "Ovos", "Chocolate"]
        steps:
          type: array
          items: { type: string }
          example: ["Misturar os ingredientes", "Assar por 40 minutos"]
        prepTime: { type: string, example: 1h30 }
        difficulty: { type: string, example: Médio }
        portions: { type: int, example: 5 }
        status: { type: string, example: Publicada }
        creationDate: { type: creationDate, example: 2025-10-15T21:36:30.471Z }
        image: { type: string, example: url-da-imagem.jpg }
        likes: { type: int, example: 23 }
        ratingCount: { type: int, example: 20 }
        ratingAvg: { type: float, example: 4.5 }

    RecipeCreate:
      type: object
      required: [name, category, ingredients, steps, description, prepTime, difficulty, portions, status]
      properties:
        name: { type: string, example: Bolo de Chocolate }
        category: { type: string, example: Sobremesa }
        description: { type: string, example: Receita de bolo caseira da minha mãe! }
        ingredients:
          type: array
          items: { type: string }
          example: ["Farinha", "Ovos", "Chocolate"]
        steps:
          type: array
          items: { type: string }
          example: ["Misturar os ingredientes", "Assar por 40 minutos"]
        prepTime: { type: string, example: 1h30 }
        difficulty: { type: string, example: Médio }
        portions: { type: int, example: 5 }
        status: { type: string, example: Publicada }
        image: { type: string, example: url-da-imagem.jpg }

    RecipeUpdate:
      type: object
      properties:
        name: { type: string, example: Bolo de Chocolate }
        category: { type: string, example: Sobremesa }
        description: { type: string, example: Receita de bolo caseira da minha mãe! }
        ingredients:
          type: array
          items: { type: string }
          example: ["Farinha", "Ovos", "Chocolate"]
        steps:
          type: array
          items: { type: string }
          example: ["Misturar os ingredientes", "Assar por 40 minutos"]
        prepTime: { type: string, example: 1h30 }
        difficulty: { type: string, example: Médio }
        portions: { type: int, example: 5 }
        status: { type: string, example: Publicada }
        image: { type: string, example: url-da-imagem.jpg }

    Comment:
      type: object
      properties:
        id: { type: string, example: uuid-do-comentario }
        content: { type: string, example: Receita ótima! }
        userId: { type: string, example: uuid-do-usuario }
        recipeId: { type: string, example: uuid-da-receita }

    CommentCreate:
      type: object
      required: [content]
      properties:
        content: { type: string, example: Receita maravilhosa! }

    RateRecipe:
      type: object
      properties:
        id: { type: string, example: uuid-da-avaliação }
        value: { type: int, example: Avaliação de 1 à 5 }
        userId: { type: string, example: uuid-do-usuario }
        recipeId: { type: string, example: uuid-da-receita }
